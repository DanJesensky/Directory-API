// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Directory.Data.Migrations {
    [DbContext(typeof(DirectoryContext))]
    [Migration("20190902175752_Initial")]
    partial class Initial {
        protected override void BuildTargetModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Directory.Data.Answer", b => {
                b.Property<int>("QuestionId")
                    .HasColumnName("questionID")
                    .HasColumnType("int(11)");

                b.Property<int>("BrotherId")
                    .HasColumnName("brotherID")
                    .HasColumnType("int(11)");

                b.Property<string>("AnswerText")
                    .IsRequired()
                    .HasColumnName("answerText")
                    .HasColumnType("varchar(2048)");

                b.HasKey("QuestionId", "BrotherId")
                    .HasName("PRIMARY");

                b.HasIndex("BrotherId")
                    .HasName("brotherID");

                b.ToTable("answer");
            });

            modelBuilder.Entity("Directory.Data.Brother", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<int>("BigBrotherId")
                    .HasColumnName("bigBrotherID")
                    .HasColumnType("int(11)");

                b.Property<string>("ChapterDesignation")
                    .HasColumnName("chapterDesignation")
                    .HasColumnType("varchar(16)");

                b.Property<DateTime?>("DateInitiated")
                    .HasColumnName("dateInitiated")
                    .HasColumnType("date");

                b.Property<DateTime?>("DateJoined")
                    .HasColumnName("dateJoined")
                    .HasColumnType("date");

                b.Property<DateTime?>("ExpectedGraduation")
                    .HasColumnName("expectedGraduation")
                    .HasColumnType("date");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnName("firstName")
                    .HasColumnType("varchar(40)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnName("lastName")
                    .HasColumnType("varchar(40)");

                b.Property<byte[]>("Picture")
                    .HasColumnName("picture")
                    .HasColumnType("mediumblob");

                b.Property<int?>("ZetaNumber")
                    .HasColumnName("zetaNumber")
                    .HasColumnType("int(11)");

                b.HasKey("Id");

                b.ToTable("brother");
            });

            modelBuilder.Entity("Directory.Data.BrotherExtracurricular", b => {
                b.Property<int>("BrotherId")
                    .HasColumnName("brotherID")
                    .HasColumnType("int(11)");

                b.Property<int>("ExtracurricularId")
                    .HasColumnName("extracurricularID")
                    .HasColumnType("int(11)");

                b.HasKey("BrotherId", "ExtracurricularId")
                    .HasName("PRIMARY");

                b.HasIndex("ExtracurricularId")
                    .HasName("extracurricularID");

                b.ToTable("brother_extracurricular");
            });

            modelBuilder.Entity("Directory.Data.BrotherMajor", b => {
                b.Property<int>("BrotherId")
                    .HasColumnName("brotherID")
                    .HasColumnType("int(11)");

                b.Property<int>("MajorId")
                    .HasColumnName("majorID")
                    .HasColumnType("int(11)");

                b.HasKey("BrotherId", "MajorId")
                    .HasName("PRIMARY");

                b.HasIndex("MajorId")
                    .HasName("majorID");

                b.ToTable("brother_major");
            });

            modelBuilder.Entity("Directory.Data.BrotherMinor", b => {
                b.Property<int>("BrotherId")
                    .HasColumnName("brotherID")
                    .HasColumnType("int(11)");

                b.Property<int>("MinorId")
                    .HasColumnName("minorID")
                    .HasColumnType("int(11)");

                b.HasKey("BrotherId", "MinorId")
                    .HasName("PRIMARY");

                b.HasIndex("MinorId")
                    .HasName("minorID");

                b.ToTable("brother_minor");
            });

            modelBuilder.Entity("Directory.Data.BrotherPosition", b => {
                b.Property<int>("BrotherId")
                    .HasColumnName("brotherID")
                    .HasColumnType("int(11)");

                b.Property<int>("PositionId")
                    .HasColumnName("positionID")
                    .HasColumnType("int(11)");

                b.Property<DateTime>("Start")
                    .HasColumnName("start")
                    .HasColumnType("date");

                b.Property<DateTime>("End")
                    .HasColumnName("end")
                    .HasColumnType("date");

                b.HasKey("BrotherId", "PositionId", "Start", "End")
                    .HasName("PRIMARY");

                b.HasIndex("PositionId")
                    .HasName("positionID");

                b.ToTable("brother_position");
            });

            modelBuilder.Entity("Directory.Data.Extracurricular", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnName("name")
                    .HasColumnType("varchar(200)");

                b.HasKey("Id");

                b.ToTable("extracurricular");
            });

            modelBuilder.Entity("Directory.Data.InactiveBrother", b => {
                b.Property<int>("Id")
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("Reason")
                    .IsRequired()
                    .HasColumnName("reason")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("inactive_brother");
            });

            modelBuilder.Entity("Directory.Data.Major", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnName("name")
                    .HasColumnType("varchar(75)");

                b.HasKey("Id");

                b.ToTable("major");
            });

            modelBuilder.Entity("Directory.Data.Minor", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnName("name")
                    .HasColumnType("varchar(75)");

                b.HasKey("Id");

                b.ToTable("minor");
            });

            modelBuilder.Entity("Directory.Data.Position", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnName("description")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnName("name")
                    .HasColumnType("varchar(75)");

                b.HasKey("Id");

                b.ToTable("position");
            });

            modelBuilder.Entity("Directory.Data.Question", b => {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasColumnType("int(11)");

                b.Property<string>("QuestionText")
                    .IsRequired()
                    .HasColumnName("questionText")
                    .HasColumnType("varchar(512)");

                b.HasKey("Id");

                b.ToTable("question");
            });

            modelBuilder.Entity("Directory.Data.Answer", b => {
                b.HasOne("Directory.Data.Brother", "Brother")
                    .WithMany("Answer")
                    .HasForeignKey("BrotherId")
                    .HasConstraintName("answer_ibfk_1")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Directory.Data.Question", "Question")
                    .WithMany("Answer")
                    .HasForeignKey("QuestionId")
                    .HasConstraintName("answer_ibfk_2")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Directory.Data.BrotherExtracurricular", b => {
                b.HasOne("Directory.Data.Brother", "Brother")
                    .WithMany("BrotherExtracurricular")
                    .HasForeignKey("BrotherId")
                    .HasConstraintName("brother_extracurricular_ibfk_1")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Directory.Data.Extracurricular", "Extracurricular")
                    .WithMany("BrotherExtracurricular")
                    .HasForeignKey("ExtracurricularId")
                    .HasConstraintName("brother_extracurricular_ibfk_2")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Directory.Data.BrotherMajor", b => {
                b.HasOne("Directory.Data.Brother", "Brother")
                    .WithMany("BrotherMajor")
                    .HasForeignKey("BrotherId")
                    .HasConstraintName("brother_major_ibfk_1")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Directory.Data.Major", "Major")
                    .WithMany("BrotherMajor")
                    .HasForeignKey("MajorId")
                    .HasConstraintName("brother_major_ibfk_2")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Directory.Data.BrotherMinor", b => {
                b.HasOne("Directory.Data.Brother", "Brother")
                    .WithMany("BrotherMinor")
                    .HasForeignKey("BrotherId")
                    .HasConstraintName("brother_minor_ibfk_1")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Directory.Data.Minor", "Minor")
                    .WithMany("BrotherMinor")
                    .HasForeignKey("MinorId")
                    .HasConstraintName("brother_minor_ibfk_2")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Directory.Data.BrotherPosition", b => {
                b.HasOne("Directory.Data.Brother", "Brother")
                    .WithMany("BrotherPosition")
                    .HasForeignKey("BrotherId")
                    .HasConstraintName("brother_position_ibfk_1")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Directory.Data.Position", "Position")
                    .WithMany("BrotherPosition")
                    .HasForeignKey("PositionId")
                    .HasConstraintName("brother_position_ibfk_2");
            });

            modelBuilder.Entity("Directory.Data.InactiveBrother", b => {
                b.HasOne("Directory.Data.Brother", "IdNavigation")
                    .WithOne("InactiveBrother")
                    .HasForeignKey("Directory.Data.InactiveBrother", "Id")
                    .HasConstraintName("inactive_brother_ibfk_1");
            });
#pragma warning restore 612, 618
        }
    }
}
